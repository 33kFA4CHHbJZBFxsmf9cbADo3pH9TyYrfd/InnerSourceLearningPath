== Wie funktioniert InnerSource?

Angenommen, Team A verwendet Software, die von Team B produziert wird.
Team A sendet eine Funktionsanforderung an Team B, aber Team B kann diese Funktion nicht rechtzeitig für Team A implementieren.
In einer InnerSource Umgebung kann Team A anstatt einer Feature-Anforderung auch alternativ einen PullRequest an Team B zur Integration schicken.
Das heißt, Team A implementiert die Funktion direkt in der Software von Team B und sendet einen PullRequest mit den Codeänderungen.
Team B überprüft dann den übermittelten Code, überarbeitet ihn gegebenenfalls in enger Partnerschaft mit Team A und integriert die Änderungen sobald sie den Anforderungen entsprechen.

In diesem Beispiel nennen wir Team A das _Guest_-Team und Team B das _Host_-Team.
Die Begriffe _Guest_ und _Host_ legen eine Situation nahe, die dem Empfang eines Besuchers im Haus entspricht.
In dieser Situation wollen die meisten Menschen ein guter Gastgeber sein.
Haben sich Gäste angekündigt, sorgen Gastgeber für eine einladende Atmosphäre.
Die Besucher werden an der Tür begrüßt und herein gebeten.
Sie können die Einrichtungen und Räume nutzen, die sich in den öffentlichen Bereichen des Zuhauses befinden.
Es kann ein paar Hausregeln geben, die Sie gebeten werden zu befolgen.
Ebenso wollen die meisten Gäste Respekt vor dem Zuhause und ihrem Gastgeber zeigen.
Sie sind vorsichtig mit den Gegenständen im Haus und folgen den Regeln für die Dauer ihres Aufenthalts.
Sie können auf eine erneute Einladung hoffen, solange sie sich gut benommen haben und höflich waren.
Diese Konzepte rund um einen Hausbesuch sind eine Metapher für die Einstellung und das Verhalten das Teams an den Tage legen sollten wenn der eine der Gastgeber (Host) ist, und der andere ein Gast (Contributor) ist der einen Gastbeitrag (Contribution) zur Codebasis leistet.

Werfen wir einen genaueren Blick darauf, wie der InnerSource-Prozess funktioniert.
Befor wir in das Thema tiefer einsteigen, lassen sie uns einige wichtige Rollen in den Gast- und Gastgeberteams vorstellen.
Zunächst bestimmt https://github.com/InnerSourceCommons/InnerSourceLearningPath/blob/master/product-owner/01-opening-article.asciidoc[_Product Owner_], welche Funktionen das Hostteam als Beitrag zu akzeptieren bereit ist.
Der https://github.com/InnerSourceCommons/InnerSourceLearningPath/blob/master/contributor/01-introduction-article.asciidoc[_Contributor_] ist die Person im Gastteam, die den Codebeitrag einreicht, welcher dann durch das Hostteam geprüft und ggf. akzeptiert wird.
Der https://github.com/InnerSourceCommons/InnerSourceLearningPath/blob/master/trusted-committer/01-introduction.asciidoc[_Trusted Committer_] steht dem Hostteam als zusätzliche Unterstützung für Review- und Mentoringaufgaben bei, um letztendlich den Contributor mit seinem Pullrequest zu unterstützen.
Bei kleinen, eingfacheren Projekten füllt oft eine einzelne Person _sowohl_ die Rolle des Produktbesitzers als auch die des Trusted Committer aus.

Basierend auf diesen Definitionen folgt nun der eine grobe Skizze des InnerSource-Prozesses.

* Gastteam oder ein Mitglied des Gastteams fragt eine Funktion vom Host-Team an.
* Der Produktbesitzer stellt sicher, dass die Featureanforderungen gemaess des Entwicklungsprozzesses des Hostteams  erstellt werden, entweder von Mitgliedern des Gastteams oder Mitgliedern des Gastgeberteams. 
Diese Documentation geschieht meist in der Form von Userstories, welche die gewünschte Funktion und Rahmenbedingungen beschreiben, die das Gastteam akzeptiert hat.
Sie listet auch alle Details aus Sicht des Host-Teams auf, z.B. wie eine Funktion geschrieben und eingereicht werden soll damit der Code akzeptiert werden kann.
Beispiele für solche Details sind Architektureinschränkungen, Codierungskonventionen, Abhängigkeitsverwendungen, Datenverträge usw.
* Unterstützt vom vertrauenswürdigen Committer, sendet der Mitwirkende den PullRequest, um die angefragte Funktion zu implementieren.

Beachten Sie, dass bei diesen Schritten kein bestimmtes System für die allgemeine Organisation der Zeit oder der Prioritäten eines Teams angenommen wird. 
InnerSource geht davon aus, dass Teams bereits über vorhandene Organisationsmethoden verfügen, und bietet einen Rahmen für die Zusammenarbeit, wenn ein Gastteam Code zu einem Project beitragen möchte.

Dieser Weg der Zusammenarbeit funktioniert gut für das Gastteam, da es die Funktionalität erhält die es benötigt, wenn sie sie benötigt, und ohne die Notwendigkeit die langfristige Wartung der Lösung zu übernehmen.
Dieser Weg funktioniert für das Gastgeberteam, weil es in der Lage ist, besser zu skalieren und seine Kunden besser zu bedienen.
Dies funktioniert für das Unternehmen in der Gesamtheit, weil Lösungen für gemeinsame Probleme an einem gemeinsamen, zentral gepflegten Ort jedem zur Verfuegung gestellt werden.
Letzlich steht mehr Zeit für die Erstellung von Code zur Verfügung, der die wirklichen Unternehmensprobleme löst, anstatt sie zur Verhandlung über Features oder für Eskalationsprozesse zu verwenden.

=== Zusätzliche Ressourcen

* Die Mustervorlage https://github.com/InnerSourceCommons/InnerSourcePatterns/blob/master/project-roles/trusted-committer.asciidoc[Trusted Committer].
