// TODO: Get thumnails for each video
// TODO: Refactor this and the old script for re-use
// TODO: GitHub Actions - more pertinent now article is rendered at build time not run time
// TODO: Is rendering to HTML, rather than Markdown, acceptable?
// TODO: New site always renders video - current site only renders video for English pages
// TODO: How to handle new _index pages?
// TODO: Add docs around generating for new site

(async() => {
  const fs = require('fs')
  const YAML = require('yaml')
  const { EOL } = require('os')
  const { join } = require('path')
  const getContributors = require('./get_contributors')
  const asciidoctor = require('asciidoctor')()

  const urls = YAML.parse(fs.readFileSync('../config/urls.yaml', 'utf-8'))

  const mkdirSync = (dir) => {
    try {
      fs.mkdirSync(dir)
    } catch (e) {
      if (e.code !== 'EEXIST') {
        console.log(e)
      }
    }
  }

  const getArticleFiles = (path) => {
    return fs.readdirSync(path).reduce((articles, filename) => {
      const filePath = `${path}/${filename}`
      if (filePath.match(/\d\d/) && !filePath.includes('-script.asciidoc')) {
        return [...articles, {
          filePath,
          asciiDoc: fs.readFileSync(filePath, 'utf-8')
        }]
      } else {
        return articles
      }
    }, [])
  }

  const writeMarkdownFile = (filePath, frontMatter, body) => {
    const frontMatterTerminator = '---'
    const originStatement = '<!--- This file autogenerated from https://github.com/InnerSourceCommons/InnerSourceLearningPath/blob/master/scripts/generate_new_site_learning_path_markdown.js -->'
    const output = [frontMatterTerminator, YAML.stringify(frontMatter).trim(), frontMatterTerminator, body, originStatement].join(EOL)
    fs.writeFileSync(filePath, output)
  }

  const getYouTubeCode = (section, articleNumber) => {
    const firstEntryOfGroupIndex = urls.findIndex(entry => entry.section === section.toLowerCase())
    const currentPageIndexOffset = articleNumber - 1
    const youtubeUrl = urls[firstEntryOfGroupIndex + currentPageIndexOffset].video.youtube
    return youtubeUrl.replace('https://www.youtube.com/watch?v=', '')
  }

  const sections = [
    {
      learning_path_group: 'Introduction',
      dirName: 'introduction',
      workbook: '01-introduction.asciidoc',
      translations: ['de', 'it', 'ja', 'zh', 'ru'],
      image: "images/learn/LP_thumbnail_introduction.jpg"
    },
    {
      learning_path_group: 'Trusted Committer',
      dirName: 'trusted-committer',
      workbook: '02-trusted-committer.asciidoc',
      translations: ['de', 'zh'],
      image: "images/learn/LP_thumbnail_trustedcommitter.jpg"
    },
    {
      learning_path_group: 'Contributor',
      dirName: 'contributor',
      workbook: '04-contributor.asciidoc',
      translations: ['ja', 'zh'],
      image: "images/learn/LP_thumbnail_contributor.jpg"
    },
    {
      learning_path_group: 'Product Owner',
      dirName: 'product-owner',
      workbook: '03-product-owner.asciidoc',
      translations: ['zh'],
      image: "images/learn/LP_thumbnail_productowner.jpg"
    },
  ]

  mkdirSync('./newsite')

  sections.forEach(({ learning_path_group, dirName, workbook, translations, image }) => {
    const baseReadPath = `../${dirName}`
    const baseWritePath = `./newsite/${dirName}`
    mkdirSync(baseWritePath)

    translations.concat('' /* The English original */).forEach(async (translation) => {
      const isTranslation = translation !== ''

      const readPath = join(baseReadPath, translation)
      const articles = getArticleFiles(readPath)
      articles.forEach(async (article) => {
        const articleTitle = article.asciiDoc.match(/== (.*)/)[1]
        const articleNumber = article.filePath.split('/').pop().split('-')[0]
        const fileName = isTranslation ? join(baseWritePath, [articleNumber, translation, 'md'].join('.')) : join(baseWritePath, [articleNumber, 'md'].join('.'))
        const contributors = await getContributors(article.filePath.replace('../', ''))
        const weight = parseInt(articleNumber)

        const frontMatter = {
          title: articleTitle,
          contributors,
          image,
          featured: weight === 1,
          weight,
          youtubeCode: getYouTubeCode(learning_path_group, weight)
        }

        writeMarkdownFile(fileName, frontMatter, asciidoctor.convert(article.asciiDoc))
      })

      // Workbooks not translated.
      if (!isTranslation) {
        const workbookFileName = join(baseWritePath, 'workbook.md')
        const contributors = await getContributors(`workbook/${workbook}`)
        console.log('workbookFileName', workbookFileName)
        const workbookFrontMatter = {
          title: 'Workbook',
          contributors,
          image,
          weight: articles.length + 2
        }

        writeMarkdownFile(workbookFileName, workbookFrontMatter)
      }
    })
  })
})()
